#!/bin/python3
import subprocess
import getpass
import requests
import sys
import os
# from pathlib import Path

tilda = f"/home/{getpass.getuser()}"

def get_web_string(url):
    response = requests.get(url)
    
    if response.status_code == 200:
        return response.text
    else:
        print(f"REQUEST ERR - {response.status_code}")
        sys.exit()

# def merge_dirs(parent):
#     files = [f for f in Path(parent).iterdir() if f.is_file()]
#


def install(to_install):
    to_install = to_install.lower().strip()
    if to_install == "":
        return

    string = get_web_string(f"https://packages.debian.org/bookworm/amd64/{to_install}/download")

    try:
        string_start = string.index("http://ftp.us.debian.org/debian/pool/main/")
        string = string[string_start:]
        string_end = string.index("\"")
        string = string[:string_end]
    except:
        return

    if subprocess.run(f"dpkg -s {to_install}", shell=True, stdout=subprocess.PIPE, text=True, stderr=subprocess.STDOUT).stdout[0] == 'P':
        print(f"{to_install} PACKAGE ALREADY INSTALLED WITH APT, SKIPPING INSTALL")
        return

    try:
        os.system(f"wget -O {to_install}.deb {string}")

        if not os.path.exists(f"/{tilda}/.pkgbin"):
            os.system(f"mkdir {tilda}/.pkgbin")

        if not os.path.exists(f"/{tilda}/.pkgbin/{to_install}"):
            os.system(f"mkdir {tilda}/.pkgbin/{to_install} && dpkg -x {to_install}.deb {tilda}/.pkgbin/{to_install}")

        else:
            print(f"PATH {tilda}/.pkgbin/{to_install} ALREADY EXISTS, SKIPPING INSTALL")
            return

        add_path_string = f"PATH=\"{tilda}/.pkgbin/{to_install}/usr/bin/:$PATH\""

        with open(f"/{tilda}/.pkgrc", "r") as f:
            data = f.read()

        with open(f"/{tilda}/.pkgrc", "w") as f:
            f.write(f"{data}\n{add_path_string}")

        
        depends = subprocess.run(f"dpkg-deb -f {to_install}.deb Depends", shell=True, stdout=subprocess.PIPE, text=True, stderr=subprocess.STDOUT).stdout
        depends_items = [""]

        paren_mode = False

        for i in range(len(depends)):
            if depends[i] == '(':
                paren_mode = True
                continue
            
            if depends[i] == ')':
                paren_mode = False
                depends_items.append("")
                continue

            if depends[i] == ',':
                continue

            if not paren_mode:
                depends_items[-1] += depends[i]

        for i in depends_items:
            install(i)

        os.remove(f"{to_install}.deb")

        print("INSTALL SUCCESSFUL probably idk")

    except Exception as e:
        os.remove(f"{to_install}.deb")
        os.system(f"rm -rf {tilda}/.pkgbin/{to_install}")

        print(f"UNHANDLED ERR - {e}")

if __name__ == "__main__":
    if len(sys.argv) <= 1:
        print("PROGRAM ERR - NO ARGUMENTS")
        sys.exit()

    install(sys.argv[1])
